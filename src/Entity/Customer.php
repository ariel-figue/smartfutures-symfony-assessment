<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use ApiPlatform\Metadata\ApiResource;
use Doctrine\Common\Collections\ArrayCollection; 
use Doctrine\Common\Collections\Collection;   

/**
 * Customer entity representing a user who makes purchases.
 * This entity is exposed as an API resource via API Platform.
 */
#[ORM\Entity]
#[ApiResource]
class Customer
{
    /**
     * @var int|null The unique identifier for the customer.
     * The ID is automatically generated by the database.
     */
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private ?int $id = null;

    /**
     * @var string|null The first name of the customer.
     */
    #[ORM\Column(type: 'string', length: 255)]
    private ?string $firstName = null;

    /**
     * @var string|null The last name of the customer.
     */
    #[ORM\Column(type: 'string', length: 255)]
    private ?string $lastName = null;

    /**
     * Get the ID of the customer.
     * 
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Get the first name of the customer.
     * 
     * @return string|null
     */
    public function getFirstName(): ?string
    {
        return $this->firstName;
    }

    /**
     * Set the first name of the customer.
     * 
     * @param string $firstName
     * @return self
     */
    public function setFirstName(string $firstName): self
    {
        $this->firstName = $firstName;
        return $this;
    }

    /**
     * Get the last name of the customer.
     * 
     * @return string|null
     */
    public function getLastName(): ?string
    {
        return $this->lastName;
    }

    /**
     * Set the last name of the customer.
     * 
     * @param string $lastName
     * @return self
     */
    public function setLastName(string $lastName): self
    {
        $this->lastName = $lastName;
        return $this;
    }

    /**
     * @var Collection The list of purchases made by the customer.
     */
    #[ORM\OneToMany(mappedBy: 'customer', targetEntity: Purchase::class)]
    private Collection $purchases;

    /**
     * Constructor initializes an empty collection of purchases.
     */
    public function __construct()
    {
        $this->purchases = new ArrayCollection();
    }

    /**
     * Get all purchases made by the customer.
     * 
     * @return Collection
     */
    public function getPurchases(): Collection
    {
        return $this->purchases;
    }

    /**
     * Add a purchase to the customer's list of purchases.
     * Ensures that the relationship is properly maintained.
     * 
     * @param Purchase $purchase
     * @return self
     */
    public function addPurchase(Purchase $purchase): self
    {
        if (!$this->purchases->contains($purchase)) {
            $this->purchases[] = $purchase;
            $purchase->setCustomer($this);
        }
        return $this;
    }

    /**
     * Remove a purchase from the customer's list of purchases.
     * Ensures the relationship is properly maintained.
     * 
     * @param Purchase $purchase
     * @return self
     */
    public function removePurchase(Purchase $purchase): self
    {
        if ($this->purchases->removeElement($purchase)) {
            // Set the owning side to null if it was assigned to this customer
            if ($purchase->getCustomer() === $this) {
                $purchase->setCustomer(null);
            }
        }
        return $this;
    }
}
